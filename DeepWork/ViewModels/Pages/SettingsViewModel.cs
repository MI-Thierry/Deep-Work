using CommunityToolkit.Mvvm.ComponentModel;using CommunityToolkit.Mvvm.Input;using Microsoft.UI.Dispatching;using Microsoft.UI.Xaml;using System.Reflection;namespace DeepWork.ViewModels.Pages{	public partial class SettingsViewModel : ObservableObject	{		[ObservableProperty]		private string _appVersion = string.Empty;		[ObservableProperty]		private ApplicationTheme _currentTheme;		public DispatcherQueue DispatcherQueue { get; set; }		public SettingsViewModel()		{			_currentTheme = Application.Current.RequestedTheme;			AssemblyName assemblyName = Assembly.GetExecutingAssembly().GetName();			_appVersion = assemblyName.Name + "-" + assemblyName.Version.ToString();		}		[RelayCommand]		private void OnChangeTheme(string parameter)		{			switch (parameter)			{				case "ThemeLight":					if (CurrentTheme == ApplicationTheme.Light)						break;					ChangeTheme(ApplicationTheme.Light);					CurrentTheme = ApplicationTheme.Light;					break;				default:					if (CurrentTheme == ApplicationTheme.Dark)						break;					ChangeTheme(ApplicationTheme.Dark);					CurrentTheme = ApplicationTheme.Dark;					break;			}		}		private void ChangeTheme(ApplicationTheme theme)		{			// Todo: Search on the internet how to solve theme changing issue.			DispatcherQueue?.TryEnqueue(() => Application.Current.RequestedTheme = theme);		}	}}